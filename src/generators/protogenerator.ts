import * as norman from "norman";
import * as fs from "fs";
import { ManifestGenerator } from "generators/manifestreader";
import * as Case from "case";

type ProtobuffType = "double" | "float" | "int32" | "int64" | "uint32" | "uint64" 
| "bool" | "string" | "bytes";

export class ProtoGenerator extends ManifestGenerator {
    constructor(manifest: norman.QueryManifest, outdir: string) {
        super(manifest, outdir);
    }

    private mapType(manifestType: string): ProtobuffType {
        if (/^varchar/.test(manifestType)) {
            return "string";
        }
        
        return "bool";
    }
    emit() {
        let dest = this.outdir;
        let stream = fs.createWriteStream(dest, { flags: "w" });
        this.stream = stream;
        this.write(`/* These messages were generated by normanc. */`)
        this.write(`syntax = "proto3";\n`);

        /* messagetype */
        this.startBlock(`enum MessageType {`);
            this.write(`Unknown = 0;`)

        for (let [idx, name] of this.queryMap()) {
            this.write(`${name} = ${idx};`)
        }
        this.endBlock(`}\n`);

        /* envelope */                
        this.startBlock(`message Envelope {`);
            this.write(`MessageType type = 1;`);
            this.write(`string version = 2;`);
            this.write(`bytes message = 3;`);
        this.endBlock(`}`)

        this.manifest.queries.forEach(query => {
            
            this.startBlock(`message ${this.requestName(query)} {`);
            let requestFields : string[] = [];
            for (let i = 0; i < query.parameters.length; i++) {
                let param =  query.parameters[i];
                let pname = Case.camel(param.name);
                let type = Case.camel(this.mapType(this.lookupType(param.type)));
                this.write(`${type} ${pname} = ${i+1};`)
            }
            this.endBlock(`}`);

            this.startBlock(`message ${this.responseName(query)} {`);
            let fidx = 1;
            for (let field of query.effect.select) {
                let fname = Case.camel(field);
                let ftype = Case.camel(this.mapType(this.lookupType(field)));

                this.write(`${ftype} ${fname} = ${fidx};`)
                fidx++;

            }
            this.endBlock(`}\n`);

        });

        stream.end();
    }
}